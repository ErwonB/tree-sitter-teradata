================================================================================
TOP
================================================================================

select top 1 * from db.my_table;

--------------------------------------------------------------------------------
    (program
      (statement
        (select
          (keyword_select)
          (top_clause
            (keyword_top)
            (literal))
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier)
              (identifier))))))

================================================================================
lock table/view for access
================================================================================

lock view db.my_table for access
lock table db.table2 for access
locking db.table3 for access
select * from my_table;

--------------------------------------------------------------------------------


    (program
      (statement
        (lock_clause
          (keyword_lock)
          (keyword_view)
          (object_reference
            (identifier)
            (identifier))
          (keyword_for)
          (keyword_access)
          (keyword_lock)
          (keyword_table)
          (object_reference
            (identifier)
            (identifier))
          (keyword_for)
          (keyword_access)
          (keyword_locking)
          (object_reference
            (identifier)
            (identifier))
          (keyword_for)
          (keyword_access))
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier))))))

================================================================================
lock row for access
================================================================================

lock row for access select * from my_table;

--------------------------------------------------------------------------------
    (program
      (statement
        (lock_clause
          (keyword_lock)
          (keyword_row)
          (keyword_for)
          (keyword_access))
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier))))))

================================================================================
current transactiontime
================================================================================

current transactiontime select * from my_table;

--------------------------------------------------------------------------------
    (program
      (statement
        (temporal_modifier
          (keyword_current)
          (keyword_transactiontime))
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier))))))

================================================================================
nonsequenced transactiontime
================================================================================

nonsequenced transactiontime select * from my_table;

--------------------------------------------------------------------------------
    (program
      (statement
        (temporal_modifier
          (keyword_nonsequenced)
          (keyword_transactiontime))
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier))))))

================================================================================
transactiontime as of
================================================================================

transactiontime as of timestamp'2025-09-19 14:02:50.730000' select * from my_table;

--------------------------------------------------------------------------------

    (program
      (statement
        (temporal_modifier
          (keyword_transactiontime)
          (keyword_as)
          (keyword_of)
          (keyword_timestamp)
          (literal))
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier))))))

================================================================================
validtime as of
================================================================================

validtime as of timestamp'2025-09-19 14:02:50.730000' select * from my_table;

--------------------------------------------------------------------------------
    (program
      (statement
        (temporal_modifier
          (keyword_validtime)
          (keyword_as)
          (keyword_of)
          (keyword_timestamp)
          (literal))
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier))))))

================================================================================
current validtime
================================================================================

current validtime select * from my_table;

--------------------------------------------------------------------------------
    (program
      (statement
        (temporal_modifier
          (keyword_current)
          (keyword_validtime))
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier))))))


================================================================================
nonsequenced validtime
================================================================================

nonsequenced validtime select * from my_table;

--------------------------------------------------------------------------------

    (program
      (statement
        (temporal_modifier
          (keyword_nonsequenced)
          (keyword_validtime))
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier))))))

================================================================================
qualify
================================================================================

select * from my_table qualify row_number() over(partition by f order by 1) = 1;

--------------------------------------------------------------------------------
    (program
      (statement
        (select
          (keyword_select)
          (select_expression
            (term
              (all_fields))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier)))
          (qualify
            (keyword_qualify)
            (binary_expression
              (window_function
                (invocation
                  (object_reference
                    (identifier)))
                (keyword_over)
                (window_specification
                  (partition_by
                    (keyword_partition)
                    (keyword_by)
                    (field
                      (identifier)))
                  (order_by
                    (keyword_order)
                    (keyword_by)
                    (order_target
                      (literal)))))
              (literal))))))

================================================================================
nontemporal
================================================================================

nontemporal update db.table1 set field = NULL;

--------------------------------------------------------------------------------
    (program
      (statement
        (keyword_nontemporal)
        (update
          (keyword_update)
          (relation
            (object_reference
              (identifier)
              (identifier)))
          (keyword_set)
          (assignment
            (field
              (identifier))
            (literal
              (keyword_null))))))


================================================================================
collect stats
================================================================================

collect stats column(field1,field3), column(field2) on db.table1;

--------------------------------------------------------------------------------

    (program
      (statement
        (keyword_collect)
        (keyword_stats)
        (keyword_column)
        (object_reference
          (identifier))
        (object_reference
          (identifier))
        (keyword_column)
        (object_reference
          (identifier))
        (keyword_on)
        (object_reference
          (identifier)
          (identifier))))

================================================================================
interval addition
================================================================================

select current_date, current_date + interval '03-01' year to month;

--------------------------------------------------------------------------------

    (program
      (statement
        (select
          (keyword_select)
          (select_expression
            (term
              (field
                (identifier)))
            (term
              (binary_expression
                (field
                  (identifier))
                (interval
                  (keyword_interval)
                  (keyword_year)
                  (keyword_to)
                  (keyword_month))))))))


================================================================================
abort statement (with a macro param)
================================================================================

abort 'condition x not met'
where not exists (select 1 from db.table1 where field1 = :arg1);

--------------------------------------------------------------------------------
    (program
      (statement
        (abort
          (keyword_abort)
          (literal)
          (where
            (keyword_where)
            (unary_expression
              (keyword_not)
              (exists
                (keyword_exists)
                (subquery
                  (select
                    (keyword_select)
                    (select_expression
                      (term
                        (literal))))
                  (from
                    (keyword_from)
                    (relation
                      (object_reference
                        (identifier)
                        (identifier)))
                    (where
                      (keyword_where)
                      (binary_expression
                        (field
                          (identifier))
                        (field
                          (identifier))))))))))))

================================================================================
(title '')
================================================================================

select 'plop' (title '');

--------------------------------------------------------------------------------

    (program
      (statement
        (select
          (keyword_select)
          (select_expression
            (term
              (attribute_expression
                (literal)
                (parenthesized_attribute
                  (keyword_title)
                  (literal))))))))

================================================================================
LOCKING ROW FOR ACCESS in view
================================================================================

REPLACE VIEW db.view1 AS
LOCKING ROW FOR ACCESS
select
field1,field2
from
db.table1
;

--------------------------------------------------------------------------------

    (program
      (statement
        (create_view
          (keyword_replace)
          (keyword_view)
          (object_reference
            (identifier)
            (identifier))
          (keyword_as)
          (create_query
            (lock_clause
              (keyword_locking)
              (keyword_row)
              (keyword_for)
              (keyword_access))
            (select
              (keyword_select)
              (select_expression
                (term
                  (field
                    (identifier)))
                (term
                  (field
                    (identifier)))))
            (from
              (keyword_from)
              (relation
                (object_reference
                  (identifier)
                  (identifier))))))))

================================================================================
LOCKING ROW FOR ACCESS in macro
================================================================================

replace macro plop.mac1(field1 varchar(50), field2 varchar(10)) as (

lock row for write
insert db.table1 (STEP_NAME, TS, STATUS)
    values(:field1,  current_timestamp(6), :field2);
);


--------------------------------------------------------------------------------
    (program
      (statement
        (create_macro
          (keyword_replace)
          (keyword_macro)
          (object_reference
            (identifier)
            (identifier))
          (column_definition
            (identifier)
            (varchar
              (keyword_varchar)
              (literal)))
          (column_definition
            (identifier)
            (varchar
              (keyword_varchar)
              (literal)))
          (keyword_as)
          (statement
            (lock_clause
              (keyword_lock)
              (keyword_row)
              (keyword_for)
              (keyword_write))
            (insert
              (keyword_insert)
              (object_reference
                (identifier)
                (identifier))
              (list
                (column
                  (identifier))
                (column
                  (identifier))
                (column
                  (identifier)))
              (keyword_values)
              (list
                (field
                  (identifier))
                (invocation
                  (object_reference
                    (identifier))
                  (term
                    (literal)))
                (field
                  (identifier))))))))

================================================================================
period operator
================================================================================

lock row for access
select
  	begin(period(a2.START_TS, a2.END_TS) p_intersect  period(a1.START_TS, a1.END_TS)) as START_TS
,  	end(period(a2.START_TS, a2.END_TS) p_intersect  period(a1.START_TS, a1.END_TS)) as END_TS
,	a1.col1
from db.table1 a1
	inner join db.table2 a2
		on a1.col2 = a2.col2
where  	period(a2.START_TS, a2.END_TS) overlaps  period(a1.START_TS, a1.END_TS)
and a1.col3 = 'plop'
group by 1,2,3
;


--------------------------------------------------------------------------------

    (program
      (statement
        (lock_clause
          (keyword_lock)
          (keyword_row)
          (keyword_for)
          (keyword_access))
        (select
          (keyword_select)
          (select_expression
            (term
              (invocation
                (object_reference
                  (identifier))
                (term
                  (period_expression
                    (invocation
                      (object_reference
                        (identifier))
                      (term
                        (field
                          (object_reference
                            (identifier))
                          (identifier)))
                      (term
                        (field
                          (object_reference
                            (identifier))
                          (identifier))))
                    (period_operator
                      (keyword_p_intersect))
                    (invocation
                      (object_reference
                        (identifier))
                      (term
                        (field
                          (object_reference
                            (identifier))
                          (identifier)))
                      (term
                        (field
                          (object_reference
                            (identifier))
                          (identifier)))))))
              (keyword_as)
              (identifier))
            (term
              (invocation
                (object_reference
                  (identifier))
                (term
                  (period_expression
                    (invocation
                      (object_reference
                        (identifier))
                      (term
                        (field
                          (object_reference
                            (identifier))
                          (identifier)))
                      (term
                        (field
                          (object_reference
                            (identifier))
                          (identifier))))
                    (period_operator
                      (keyword_p_intersect))
                    (invocation
                      (object_reference
                        (identifier))
                      (term
                        (field
                          (object_reference
                            (identifier))
                          (identifier)))
                      (term
                        (field
                          (object_reference
                            (identifier))
                          (identifier)))))))
              (keyword_as)
              (identifier))
            (term
              (field
                (object_reference
                  (identifier))
                (identifier)))))
        (from
          (keyword_from)
          (relation
            (object_reference
              (identifier)
              (identifier))
            (identifier))
          (join
            (keyword_inner)
            (keyword_join)
            (relation
              (object_reference
                (identifier)
                (identifier))
              (identifier))
            (keyword_on)
            (binary_expression
              (field
                (object_reference
                  (identifier))
                (identifier))
              (field
                (object_reference
                  (identifier))
                (identifier))))
          (where
            (keyword_where)
            (binary_expression
              (period_expression
                (invocation
                  (object_reference
                    (identifier))
                  (term
                    (field
                      (object_reference
                        (identifier))
                      (identifier)))
                  (term
                    (field
                      (object_reference
                        (identifier))
                      (identifier))))
                (period_operator
                  (keyword_overlaps))
                (invocation
                  (object_reference
                    (identifier))
                  (term
                    (field
                      (object_reference
                        (identifier))
                      (identifier)))
                  (term
                    (field
                      (object_reference
                        (identifier))
                      (identifier)))))
              (keyword_and)
              (binary_expression
                (field
                  (object_reference
                    (identifier))
                  (identifier))
                (literal))))
          (group_by
            (keyword_group)
            (keyword_by)
            (literal)
            (literal)
            (literal)))))

